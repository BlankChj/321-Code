# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from udp_pkg/PositionVelocityAccel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionVelocityAccel(genpy.Message):
  _md5sum = "b1ec75ae739361310f2b2bc1600571ae"
  _type = "udp_pkg/PositionVelocityAccel"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string frame_id
float64 stamp
float64 x_pos
float64 y_pos
float64 z_pos
float64 x_ori
float64 y_ori
float64 z_ori
float64 w_ori
float64 x_vel
float64 y_vel
float64 z_vel
float64 x_acc
float64 y_acc
float64 z_acc
"""
  __slots__ = ['frame_id','stamp','x_pos','y_pos','z_pos','x_ori','y_ori','z_ori','w_ori','x_vel','y_vel','z_vel','x_acc','y_acc','z_acc']
  _slot_types = ['string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id,stamp,x_pos,y_pos,z_pos,x_ori,y_ori,z_ori,w_ori,x_vel,y_vel,z_vel,x_acc,y_acc,z_acc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionVelocityAccel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
      if self.stamp is None:
        self.stamp = 0.
      if self.x_pos is None:
        self.x_pos = 0.
      if self.y_pos is None:
        self.y_pos = 0.
      if self.z_pos is None:
        self.z_pos = 0.
      if self.x_ori is None:
        self.x_ori = 0.
      if self.y_ori is None:
        self.y_ori = 0.
      if self.z_ori is None:
        self.z_ori = 0.
      if self.w_ori is None:
        self.w_ori = 0.
      if self.x_vel is None:
        self.x_vel = 0.
      if self.y_vel is None:
        self.y_vel = 0.
      if self.z_vel is None:
        self.z_vel = 0.
      if self.x_acc is None:
        self.x_acc = 0.
      if self.y_acc is None:
        self.y_acc = 0.
      if self.z_acc is None:
        self.z_acc = 0.
    else:
      self.frame_id = ''
      self.stamp = 0.
      self.x_pos = 0.
      self.y_pos = 0.
      self.z_pos = 0.
      self.x_ori = 0.
      self.y_ori = 0.
      self.z_ori = 0.
      self.w_ori = 0.
      self.x_vel = 0.
      self.y_vel = 0.
      self.z_vel = 0.
      self.x_acc = 0.
      self.y_acc = 0.
      self.z_acc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.stamp, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ori, _x.y_ori, _x.z_ori, _x.w_ori, _x.x_vel, _x.y_vel, _x.z_vel, _x.x_acc, _x.y_acc, _x.z_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.stamp, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ori, _x.y_ori, _x.z_ori, _x.w_ori, _x.x_vel, _x.y_vel, _x.z_vel, _x.x_acc, _x.y_acc, _x.z_acc,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.stamp, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ori, _x.y_ori, _x.z_ori, _x.w_ori, _x.x_vel, _x.y_vel, _x.z_vel, _x.x_acc, _x.y_acc, _x.z_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.stamp, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ori, _x.y_ori, _x.z_ori, _x.w_ori, _x.x_vel, _x.y_vel, _x.z_vel, _x.x_acc, _x.y_acc, _x.z_acc,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
