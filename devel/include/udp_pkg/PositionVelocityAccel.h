// Generated by gencpp from file udp_pkg/PositionVelocityAccel.msg
// DO NOT EDIT!


#ifndef UDP_PKG_MESSAGE_POSITIONVELOCITYACCEL_H
#define UDP_PKG_MESSAGE_POSITIONVELOCITYACCEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace udp_pkg
{
template <class ContainerAllocator>
struct PositionVelocityAccel_
{
  typedef PositionVelocityAccel_<ContainerAllocator> Type;

  PositionVelocityAccel_()
    : frame_id()
    , stamp(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , z_pos(0.0)
    , x_ori(0.0)
    , y_ori(0.0)
    , z_ori(0.0)
    , w_ori(0.0)
    , x_vel(0.0)
    , y_vel(0.0)
    , z_vel(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)  {
    }
  PositionVelocityAccel_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , stamp(0.0)
    , x_pos(0.0)
    , y_pos(0.0)
    , z_pos(0.0)
    , x_ori(0.0)
    , y_ori(0.0)
    , z_ori(0.0)
    , w_ori(0.0)
    , x_vel(0.0)
    , y_vel(0.0)
    , z_vel(0.0)
    , x_acc(0.0)
    , y_acc(0.0)
    , z_acc(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef double _stamp_type;
  _stamp_type stamp;

   typedef double _x_pos_type;
  _x_pos_type x_pos;

   typedef double _y_pos_type;
  _y_pos_type y_pos;

   typedef double _z_pos_type;
  _z_pos_type z_pos;

   typedef double _x_ori_type;
  _x_ori_type x_ori;

   typedef double _y_ori_type;
  _y_ori_type y_ori;

   typedef double _z_ori_type;
  _z_ori_type z_ori;

   typedef double _w_ori_type;
  _w_ori_type w_ori;

   typedef double _x_vel_type;
  _x_vel_type x_vel;

   typedef double _y_vel_type;
  _y_vel_type y_vel;

   typedef double _z_vel_type;
  _z_vel_type z_vel;

   typedef double _x_acc_type;
  _x_acc_type x_acc;

   typedef double _y_acc_type;
  _y_acc_type y_acc;

   typedef double _z_acc_type;
  _z_acc_type z_acc;





  typedef boost::shared_ptr< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> const> ConstPtr;

}; // struct PositionVelocityAccel_

typedef ::udp_pkg::PositionVelocityAccel_<std::allocator<void> > PositionVelocityAccel;

typedef boost::shared_ptr< ::udp_pkg::PositionVelocityAccel > PositionVelocityAccelPtr;
typedef boost::shared_ptr< ::udp_pkg::PositionVelocityAccel const> PositionVelocityAccelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator1> & lhs, const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.stamp == rhs.stamp &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.z_pos == rhs.z_pos &&
    lhs.x_ori == rhs.x_ori &&
    lhs.y_ori == rhs.y_ori &&
    lhs.z_ori == rhs.z_ori &&
    lhs.w_ori == rhs.w_ori &&
    lhs.x_vel == rhs.x_vel &&
    lhs.y_vel == rhs.y_vel &&
    lhs.z_vel == rhs.z_vel &&
    lhs.x_acc == rhs.x_acc &&
    lhs.y_acc == rhs.y_acc &&
    lhs.z_acc == rhs.z_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator1> & lhs, const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace udp_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1ec75ae739361310f2b2bc1600571ae";
  }

  static const char* value(const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1ec75ae73936131ULL;
  static const uint64_t static_value2 = 0x0f2b2bc1600571aeULL;
};

template<class ContainerAllocator>
struct DataType< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "udp_pkg/PositionVelocityAccel";
  }

  static const char* value(const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"float64 stamp\n"
"float64 x_pos\n"
"float64 y_pos\n"
"float64 z_pos\n"
"float64 x_ori\n"
"float64 y_ori\n"
"float64 z_ori\n"
"float64 w_ori\n"
"float64 x_vel\n"
"float64 y_vel\n"
"float64 z_vel\n"
"float64 x_acc\n"
"float64 y_acc\n"
"float64 z_acc\n"
;
  }

  static const char* value(const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.stamp);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.z_pos);
      stream.next(m.x_ori);
      stream.next(m.y_ori);
      stream.next(m.z_ori);
      stream.next(m.w_ori);
      stream.next(m.x_vel);
      stream.next(m.y_vel);
      stream.next(m.z_vel);
      stream.next(m.x_acc);
      stream.next(m.y_acc);
      stream.next(m.z_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionVelocityAccel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udp_pkg::PositionVelocityAccel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::udp_pkg::PositionVelocityAccel_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "stamp: ";
    Printer<double>::stream(s, indent + "  ", v.stamp);
    s << indent << "x_pos: ";
    Printer<double>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<double>::stream(s, indent + "  ", v.y_pos);
    s << indent << "z_pos: ";
    Printer<double>::stream(s, indent + "  ", v.z_pos);
    s << indent << "x_ori: ";
    Printer<double>::stream(s, indent + "  ", v.x_ori);
    s << indent << "y_ori: ";
    Printer<double>::stream(s, indent + "  ", v.y_ori);
    s << indent << "z_ori: ";
    Printer<double>::stream(s, indent + "  ", v.z_ori);
    s << indent << "w_ori: ";
    Printer<double>::stream(s, indent + "  ", v.w_ori);
    s << indent << "x_vel: ";
    Printer<double>::stream(s, indent + "  ", v.x_vel);
    s << indent << "y_vel: ";
    Printer<double>::stream(s, indent + "  ", v.y_vel);
    s << indent << "z_vel: ";
    Printer<double>::stream(s, indent + "  ", v.z_vel);
    s << indent << "x_acc: ";
    Printer<double>::stream(s, indent + "  ", v.x_acc);
    s << indent << "y_acc: ";
    Printer<double>::stream(s, indent + "  ", v.y_acc);
    s << indent << "z_acc: ";
    Printer<double>::stream(s, indent + "  ", v.z_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UDP_PKG_MESSAGE_POSITIONVELOCITYACCEL_H
